// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id               String    @id @default(uuid())
  email            String    @unique
  username         String    @unique
  name             String?
  password         String
  image            String?
  verifyToken      String?
  verifyExpiry     DateTime?
  forgotPassToken  String?
  forgotPassExpiry DateTime?
  role             String    @default("User")
  sessions         Session[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  accounts         Account[]
  posts            Post[]
  comments         Comment[]
  isEmailVerified  Boolean   @default(false)
  emailVerified    DateTime?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  username          String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id             String    @id @default(uuid())
  author         User      @relation(fields: [userId], references: [id])
  slug           String    @unique
  title          String
  body           String
  userId         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  captionImg     String?
  comments       Comment[]
  commentEnabled Boolean   @default(true)
  postMeta       PostMeta?
}

model Comment {
  id             String    @id @default(uuid())
  author         User?     @relation(fields: [userId], references: [id])
  guestName      String?
  body           String
  post           Post      @relation(fields: [postId], references: [id])
  postId         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  userId         String?
  parentComment  Comment?  @relation("parentComments", fields: [commentId], references: [id])
  parentComments Comment[] @relation("parentComments")
  commentId      String?
  email          String?
}

model PostMeta {
  id               String  @id @default(uuid())
  post_title       String?
  post_description String?
  post             Post    @relation(fields: [postId], references: [id])
  postId           String  @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
